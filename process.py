class Decoder:
    decoding_dictionary = {}
    
    def __init__(self):
        sample1 = "Мы получили ваш запрос на отмену невозвратного бронирования в отеле"
        sample2 = "Пожалуйста, сообщите причину отмены бронирования, это может помочь нам в минимизации штрафа. Также просим по возможности приложить подтверждающие документы."
        sample3 = "С нашей стороны мы сделаем всё возможное, чтобы отменить бронирование хотя бы с частичным возвратом средств, но гарантировать этого не можем в силу условий тарифа."
        sample4 = "С нетерпением ждём вашего ответа."
        coded_sample1 = "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–µ–ª–µ"
        coded_sample2 = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –Ω–∞–º –≤ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —à—Ç—Ä–∞—Ñ–∞. –¢–∞–∫–∂–µ –ø—Ä–æ—Å–∏–º –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã."
        coded_sample3 = "–° –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ—Ç—è –±—ã —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤, –Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –Ω–µ –º–æ–∂–µ–º –≤ —Å–∏–ª—É —É—Å–ª–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ–∞."
        coded_sample4 = "–° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞."
        s = sample1 + sample2 + sample3 + sample4
        c = coded_sample1 + coded_sample2 + coded_sample3 + coded_sample4

        j = 0
        for i in s:
            if i == c[j]:
                j += 1
                continue
            self.decoding_dictionary[c[j] + c[j + 1]] = i
            j += 2

    def decode(self, text : str):
        for key in self.decoding_dictionary:
            text = text.replace(key, self.decoding_dictionary[key])
        return text